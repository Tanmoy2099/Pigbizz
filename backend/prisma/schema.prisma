// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String?               @unique
  phone                String?               @unique
  password             String
  name                 String
  isAdmin              Boolean               @default(false)
  passwordModified     Boolean               @default(false)
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  expireToken          DateTime?
  Notifications        Notifications[]
  CompletedDailyTask   CompletedDailyTasks[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  assigneeTask assignTask[] @relation("AssigneeRelation")
  assignedTask assignTask[] @relation("AssignedRelation")
}

model Batch {
  id                      Int                       @id @default(autoincrement())
  batch                   String                    @unique
  isActive                Boolean                   @default(true)
  Pig_details             Pig_details[]
  Assign_medicine         Assign_medicine[]
  Emergency_medicine_data Emergency_medicine_data[]
  feed_planer             Feed_Planer[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
}

enum gender {
  male
  female
}

model Pig_details {
  id                               Int                   @id @default(autoincrement())
  breeding_details                 String
  unique_id                        String                @unique
  tag_no                           String                @unique
  age                              Float
  weight                           Float
  gender                           gender
  fathers_tagNo                    String?
  mothers_tagNo                    String?
  predictive_pregnancy             Boolean               @default(false)
  batch                            Batch                 @relation(fields: [batch_no], references: [batch], onUpdate: Cascade, onDelete: Cascade)
  batch_no                         String
  sold                             Boolean               @default(false)
  price                            Float?                @default(0)
  grouping                         String
  is_ade3h_inj                     Boolean               @default(false)
  expected_deworming_date          DateTime?
  is_deworming                     Boolean               @default(false)
  delivery_room_sentExpectedDate   DateTime?
  is_deliveryRoomClean             Boolean               @default(false)
  expected_deliveryDate            DateTime?
  expected_amoxcillin_powderDate   DateTime?
  is_amoxicillin                   Boolean               @default(false)
  expected_bitadinespray_date      DateTime
  is_bitadinespray                 Boolean               @default(false)
  actual_deliverydate              DateTime
  no_ofPiglet                      Int?                  @default(0)
  no_of_male                       Int?                  @default(0)
  no_of_female                     Int?                  @default(0)
  saw_id                           String?
  boar_id                          String?
  first_heatDate                   DateTime?
  second_heatDate                  DateTime?
  third_heatDate                   DateTime?
  first_crossingDate               DateTime
  is_rechockAfterFirstCrossingDate Boolean               @default(false)
  second_crossingDate              DateTime?
  expected_1stade3hInjDate         DateTime?
  is_1stAde3h                      Boolean               @default(false)
  expected_2ndade3hInjDate         DateTime?
  date_of_lic_startedDate          DateTime?
  days                             Int                   @default(1)
  is_2ndAde3h                      Boolean               @default(false)
  Notifications                    Notifications[]
  CompletedDailyTask               CompletedDailyTasks[]
  SoldPigs                         SoldPigs[]
  farrowing                        Boolean               @default(false)
  weaning                          Boolean               @default(false)
  farrowing_days                   Int                   @default(0)
  whichPregnancy                   Int?                  @default(0)
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @default(now()) @updatedAt
}

enum status {
  complete
  pending
}

model Assign_medicine {
  id            Int           @id @default(autoincrement())
  medicine_name String
  dose          Float
  status        status        @default(pending)
  batch         Batch         @relation(fields: [batch_no], references: [batch], onUpdate: Cascade, onDelete: Cascade)
  batch_no      String
  medicine      Medicine_Type @relation(fields: [medicine_type], references: [type], onUpdate: Cascade)
  medicine_type String
  price         Float         @default(0)
  date          DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

model Medicine_Type {
  id                             Int                              @id @default(autoincrement())
  type                           String                           @unique()
  Assign_medicine                Assign_medicine[]
  Medicine_inventory             Medicine_inventory[]
  medicine_inventory_transaction Medicine_Inventory_Transaction[]
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @default(now()) @updatedAt
}

model Emergency_medicine_data {
  id            Int      @id @default(autoincrement())
  medicine_name String
  dose          Float
  status        status   @default(pending)
  batch         Batch    @relation(fields: [batch_no], references: [batch], onUpdate: Cascade)
  batch_no      String
  price         Float    @default(0)
  date          DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("emergency_medicine_data")
}

model Medicine_inventory {
  id            Int           @id @default(autoincrement())
  medicine_name String        @unique
  cost          Float
  quantity      Int
  medicine      Medicine_Type @relation(fields: [medicine_type], references: [type], onUpdate: Cascade, onDelete: Cascade)
  medicine_type String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([medicine_name, medicine_type])
  @@map("medicine_inventory")
}

model Medicine_Inventory_Transaction {
  id            Int           @id @default(autoincrement())
  medicine_name String
  date          DateTime      @default(now())
  cost          Float
  quantity      Int
  medicine      Medicine_Type @relation(fields: [medicine_type], references: [type], onUpdate: Cascade, onDelete: Cascade)
  medicine_type String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("medicine_inventory_transactions")
}

enum emailType {
  smtp
  gmail
  sendgrid
}

model Setting {
  id                          Int       @id @default(autoincrement())
  low_medicine_parameter      Float     @default(20)
  low_feed_parameter          Float     @default(20)
  default_pagination_limit    Int       @default(9)
  small_list_pagination_limit Int       @default(5)
  email_type                  emailType @default(smtp)
  email_smtp_host             String?
  email_smtp_port             Int?
  email_smtp_username         String    @default("")
  email_smtp_password         String    @default("")
  sendgrid_password           String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @default(now()) @updatedAt
}

enum feed_type {
  Creep
  Starter
  Grower
  Finisher
}

enum feed_assign_type {
  batch
  individual
}

model Feed_Planer {
  id          Int              @id @default(autoincrement())
  feed_name   String
  feed_type   feed_type        @default(Creep)
  batch       Batch?           @relation(fields: [batch_no], references: [batch], onUpdate: Cascade, onDelete: Cascade)
  batch_no    String?
  quantity    Int
  tag_no      String?
  assign_type feed_assign_type @default(batch)
  cost        Float            @default(0)
  status      status?          @default(pending)
  date        DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("feed_planer")
}

model Feed_Type {
  id                         Int                          @id @default(autoincrement())
  type                       String                       @unique()
  Feed_inventory             Feed_inventory[]
  Feed_Inventory_Transaction Feed_Inventory_Transaction[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @default(now()) @updatedAt
}

model Feed_inventory {
  id        Int       @id @default(autoincrement())
  feed_name String    @unique
  cost      Float
  quantity  Int
  feed      Feed_Type @relation(fields: [feed_type], references: [type], onUpdate: Cascade, onDelete: Cascade)
  feed_type String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([feed_name, feed_type])
  @@map("feed_inventory")
}

model Feed_Inventory_Transaction {
  id        Int       @id @default(autoincrement())
  feed_name String
  date      DateTime  @default(now())
  cost      Float
  quantity  Int
  feed      Feed_Type @relation(fields: [feed_type], references: [type], onUpdate: Cascade, onDelete: Cascade)
  feed_type String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("feed_inventory_transactions")
}

model Cost_Type {
  id        Int       @id @default(autoincrement())
  type      String    @unique
  Expense   Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Expense {
  id         Int       @id @default(autoincrement())
  name       String
  cost       Float
  cost_table Cost_Type @relation(fields: [cost_type], references: [type], onUpdate: Cascade, onDelete: Cascade)
  cost_type  String
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum pigType {
  piglet
}

model BirthToFinishFeedingPlan {
  id             Int     @id @default(autoincrement())
  afterFarrowing String
  type           pigType @default(piglet)
  colostrum      String
  day            String
  creepFeedGMS   String
  starterFeedGMS String
  growerFeedGMS  String
  fisherFeedGMS  String
  expectedWeight String
  actualWeight   String

  @@map("birth_to_finish_feeding_plan")
}

model BreederAndLactationFeedingPlan {
  id       Int    @id @default(autoincrement())
  days     String
  quantity String
  feedType String

  @@map("breeder_and_lactation_feeding_plan")
}

model BirthToFinishMedicinePlan {
  id             Int    @id @default(autoincrement())
  date           String
  day            String
  dose           String
  im_subcut_oral String
  ml             String
  brand          String

  @@map("birth_to_finish_medicine_plan")
}

// model Notifications {
//   id          Int         @id @default(autoincrement())
//   pig_details Pig_details @relation(fields: [pig_id], references: [id], onDelete: Cascade)
//   pig_id      Int
//   user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   user_id     Int
//   day         Int
//   status      String      @default("pending") @db.VarChar(255)
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @default(now()) @updatedAt

//   @@map("notifications")
// }

model Notifications {
  id          Int          @id @default(autoincrement())
  pig_details Pig_details? @relation(fields: [pig_id], references: [id], onDelete: Cascade)
  pig_id      Int?
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  day         Int?
  message     String?
  assignTask  assignTask?  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task_id     Int?
  isViewed    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@map("notifications")
}

model CompletedDailyTasks {
  id          Int         @id @default(autoincrement())
  pig_details Pig_details @relation(fields: [pig_id], references: [id], onDelete: Cascade)
  pig_id      Int
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  day         Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt

  @@map("completed_daily_tasks")
}

model SoldPigs {
  id          Int         @id @default(autoincrement())
  pig_details Pig_details @relation(fields: [unique_id], references: [unique_id], onDelete: Cascade)
  unique_id   String      @unique
  price       Float
  sold_date   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt

  @@map("sold_pigs")
}

enum costType {
  crew
}

model Expenses {
  id        Int      @id @default(autoincrement())
  name      String
  cost      Float
  cost_type costType @default(crew)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("expenses")
}

model assignTask {
  id            Int             @id @default(autoincrement())
  assignee      User?           @relation("AssigneeRelation", fields: [assignee_id], references: [id])
  assignee_id   Int?
  system        Boolean         @default(true)
  assigned      User            @relation("AssignedRelation", fields: [assigned_id], references: [id], onDelete: Cascade)
  assigned_id   Int
  task          String
  remark        String?
  status        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Notifications Notifications[]

  @@map("assign_task")
}
